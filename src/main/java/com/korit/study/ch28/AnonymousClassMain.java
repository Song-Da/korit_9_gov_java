package com.korit.study.ch28;

import java.util.concurrent.atomic.AtomicInteger;

public class AnonymousClassMain {
    public static void main(String[] args) {
        AnonymousClass a = new AnonymousClassImpl();
        a.fx1();
        System.out.println(a.fx2());

        int num = 10;
        AtomicInteger num2 = new AtomicInteger(10);

        AnonymousClass b = new AnonymousClass() {
            @Override
            public void fx1() {
                System.out.println(num);
                num2.set(num2.get() + 10); // 이 오류는 인텔제가 잡아주는 거임.
                // 이클립스로 가져가면 코드가 됨.
                // 이 변수를 이 메서드 안에서 움직인다면 10 을 더하라.

            }

            /**
             * 이전에
             */

            @Override
            public int fx2() {
                return num2.get() + 1000;
            }
        };
        b.fx1();
        b.fx2();
    }
}

/**
 * 아뭐지
 * 리턴 받아온 건 값으로 쓰면 됨
 * 
 * 클래스만 가능했던 게 인터페이스 또한 가능...? 
 * 힙 메모리에 동적 할당 하려면 클래스를 생성해야 하는데 객체에 존재해야지만 접근 참조를 해서 변수를
 * 쓰는데 그럴려면 틀이 존재해야 하고 그게 클래스라고 함
 * 
 * 인터페이스를 가지고 임플리먼츠 하고... 클래스로 생성이 가능함
 * 원래는 인터페이스는 생성자를 호출해서 생성이 불가한데... 인터페이스를 클래스로 무조건 임플리먼츠를 해야지만 가능한데 (구현 행위)
 * 
 * 직관적으로 보기
 * 구현을 뒤에다가 할 거야. 9 줄 코드의 소괄호와 중괄호 사이에 클래스 명이 생략된 것임.
 * 달고나
 * 별모양 틀이 있는데 거기에 별모양 틀을 가져와. 이름을 지어놓았기에 들고오기가 가능함.
 * 파일을 하나 만들어둘 필요가 없을 때 생성해서 쓰고 말겠다는 의미...
 * 익명 클래스?
 *
 * 추상화를 해두는 이유는 무엇인가
 * 후상화를 해두면 a 에서 다르게 구현 가능, b 에서도 다르게 구현 가능
 * 마치 전등 전원, 에어컨 전원처럼 켜라. 하는 명령은 같지만 동작이 다름.
 * 프로그램의 버튼들 하나하나가 객체. 아이콘만 다를 뿐... 눌러서 동작하는 건 똑같음
 * new 해서 생성하면 아이콘만 다름
 * 누르면 뭔가 동작을 하는데 누른다는 행위는 똑같음. 아; 눌렀을 때 안에서 동작하는 건 똑같이 동작하지 않음.
 * 그래서 인터페이스 = 버튼 이라는 걸 만들어두는 것
 * 버튼 = 클릭
 * 클릭이라는 메서드 정의
 *
 * A 버튼, B 버튼.. 조금 다르지만 인터페이스를 가져다 쓸 수 있음.
 * 여기서만 쓰고 만다 틀 재사용 필요X
 * 그냥 익명으로 하나 만들어서 쓰고 말겠다.
 * 한번 이 기능 안에서만 쓸 때 Anonymous 를 씀.
 * 메서드 안에 클래스를 정의할 수 없음. 클래스 안에 클래스를 정의할 수 있음.
 *
 * anonyumous 이해하기
 * 인터페이스를 뉴해서 생성
 * 추상 클래스도 가능
 *
 * 이녀석에 대한 정의가 어떠한 스레드에서 동작을 하다가 중간에 이 자리를 차고 들어와버리면 둘이가
 * 10 이 들어있었는데 다시 유예가 자기 차례가 돼서 보니 오류가 나있다는 그런게 있음...
 * 아토믹 객체에 get 이든 lock 이든 들어가있으면 뭐... 실행이 안 된다? 기본적인 익명 클래스의 정의.
 *
 *
 */