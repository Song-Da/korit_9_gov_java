package com.korit.study.ch21;

public class SingletonMain {
    public static void main(String[] args) {
        ClassA a = new ClassA();
        ClassB b = new ClassB();
        ClassC c = new ClassC();
//        Singleton singleton = new Singleton("Class Data");


//        a.run();
//        b.run();
//        c.run();
    }
}
// static 은 하나 만들어놓고 공유하는 것.
// 정적 메모리이기 때문에 계속 메모리를 점유하고 있음.
// 쓸모없는 메모리 공간을 잡아두고 있기 때문에... 안 쓰는데 계속 물이 질질 흐르는 것과 마찬가지
// 싱글톤 개념을 배우게 되면 자주 쓰는 객체는 하나의 유일 객체로 만들어두고 이걸 공유해서 불러다가 쓰는 것.
// 스태틱의 좋은 점 위치가 어디에 있든 상관이 없고 가져다 쓸 수 있다. 매개변수로 안 넘겨줘도 된다는 것.
// 이렇게 해결도 가능함.
// 공용으로 쓸 수 있게 어느 위치에 있든 쓸 수 있게 만들어주는 게 static이다.
// 매번 다른 곳에서 동일한 하나의 객체를 공유해서 쓰고 싶다. 굳이 두개 만들 필요가 없다.
// 다른 애들은 새로운 데에 다시 쓰일 가능성이 있지만 싱글톤을 쓰는 애들은 0에 가까움. 무조건 하나의 객체만 만들어서...
// 메모리 낭비가 심함. 외부에서 생성되면 절대 안 된다.

// 싱글톤은 객체가 무조건 하나만. 한번만 공유해서 쓰고 싶을 때!!
// 무조건 생성자는 외부에서 생성 안 되게끔 접근 지정자를 private 로 세팅해줘야 한다. 약속된 거임.